{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\n\n// API client for interacting with the backend\nconst apiClient = {\n  // Get list of all available models\n  getModels: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/api/models`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching models:', error);\n      throw error;\n    }\n  },\n  // Get details of a specific model\n  getModelDetails: async modelId => {\n    try {\n      const response = await axios.get(`${API_URL}/api/models/${modelId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching model ${modelId}:`, error);\n      throw error;\n    }\n  },\n  // Make prediction with image file\n  predictImage: async (modelId, file) => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post(`${API_URL}/api/models/${modelId}/predict`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error making image prediction:', error);\n      throw error;\n    }\n  },\n  // Make prediction with text\n  predictText: async (modelId, text) => {\n    try {\n      const response = await axios.post(`${API_URL}/api/models/${modelId}/predict/text`, {\n        text\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error making text prediction:', error);\n      throw error;\n    }\n  },\n  // Make prediction with tabular data\n  predictTabular: async (modelId, features) => {\n    try {\n      const response = await axios.post(`${API_URL}/api/models/${modelId}/predict/tabular`, {\n        features\n      });\n      return response.data;\n    } catch (error) {\n      // Enhanced error handling for tabular predictions\n      console.error('Error making tabular prediction:', error);\n\n      // Extract detailed error information from the response\n      if (error.response) {\n        // Preserve the original error but add structured information\n        throw {\n          message: error.response.data.detail || 'Error during prediction',\n          response: error.response,\n          required_features: error.response.data.required_features || [],\n          status: error.response.status\n        };\n      }\n\n      // If it's not a response error (e.g., network error)\n      throw error;\n    }\n  },\n  // Upload a new model\n  uploadModel: async (name, description, inputType, modelFile) => {\n    try {\n      const formData = new FormData();\n      formData.append('name', name);\n      formData.append('description', description);\n      formData.append('input_type', inputType);\n      formData.append('model_file', modelFile);\n      const response = await axios.post(`${API_URL}/api/models/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading model:', error);\n      throw error;\n    }\n  },\n  // Delete a model\n  deleteModel: async modelId => {\n    try {\n      const response = await axios.delete(`${API_URL}/api/models/${modelId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error deleting model ${modelId}:`, error);\n      throw error;\n    }\n  },\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/api/health`);\n      return response.data;\n    } catch (error) {\n      console.error('Error checking API health:', error);\n      throw error;\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_URL","apiClient","getModels","response","get","data","error","console","getModelDetails","modelId","predictImage","file","formData","FormData","append","post","headers","predictText","text","predictTabular","features","message","detail","required_features","status","uploadModel","name","description","inputType","modelFile","deleteModel","delete","healthCheck"],"sources":["E:/Courses/DEPI/Technical/Project/Template/src/api/apiClient.ts"],"sourcesContent":["import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\n\n// API client for interacting with the backend\nconst apiClient = {\n  // Get list of all available models\n  getModels: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/api/models`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching models:', error);\n      throw error;\n    }\n  },\n\n  // Get details of a specific model\n  getModelDetails: async (modelId: string) => {\n    try {\n      const response = await axios.get(`${API_URL}/api/models/${modelId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching model ${modelId}:`, error);\n      throw error;\n    }\n  },\n\n  // Make prediction with image file\n  predictImage: async (modelId: string, file: File) => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post(\n        `${API_URL}/api/models/${modelId}/predict`,\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error making image prediction:', error);\n      throw error;\n    }\n  },\n\n  // Make prediction with text\n  predictText: async (modelId: string, text: string) => {\n    try {\n      const response = await axios.post(\n        `${API_URL}/api/models/${modelId}/predict/text`,\n        { text }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error making text prediction:', error);\n      throw error;\n    }\n  },\n\n  // Make prediction with tabular data\n  predictTabular: async (modelId: string, features: Record<string, any>) => {\n    try {\n      const response = await axios.post(\n        `${API_URL}/api/models/${modelId}/predict/tabular`,\n        { features }\n      );\n      return response.data;\n    } catch (error) {\n      // Enhanced error handling for tabular predictions\n      console.error('Error making tabular prediction:', error);\n      \n      // Extract detailed error information from the response\n      if (error.response) {\n        // Preserve the original error but add structured information\n        throw {\n          message: error.response.data.detail || 'Error during prediction',\n          response: error.response,\n          required_features: error.response.data.required_features || [],\n          status: error.response.status\n        };\n      }\n      \n      // If it's not a response error (e.g., network error)\n      throw error;\n    }\n  },\n\n  // Upload a new model\n  uploadModel: async (name: string, description: string, inputType: string, modelFile: File) => {\n    try {\n      const formData = new FormData();\n      formData.append('name', name);\n      formData.append('description', description);\n      formData.append('input_type', inputType);\n      formData.append('model_file', modelFile);\n      \n      const response = await axios.post(\n        `${API_URL}/api/models/upload`,\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading model:', error);\n      throw error;\n    }\n  },\n\n  // Delete a model\n  deleteModel: async (modelId: string) => {\n    try {\n      const response = await axios.delete(`${API_URL}/api/models/${modelId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error deleting model ${modelId}:`, error);\n      throw error;\n    }\n  },\n\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/api/health`);\n      return response.data;\n    } catch (error) {\n      console.error('Error checking API health:', error);\n      throw error;\n    }\n  }\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}